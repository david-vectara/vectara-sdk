<?php
/**
 * SearchCorpusParameters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vectara REST API v2
 *
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\VectaraModel;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SearchCorpusParameters Class Doc Comment
 *
 * @category Class
 * @description The parameters to search one corpus.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchCorpusParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchCorpusParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'custom_dimensions' => 'array<string,float>',
        'metadata_filter' => 'string',
        'lexical_interpolation' => 'float',
        'semantics' => '\OpenAPI\Client\VectaraModel\SearchSemantics',
        'offset' => 'int',
        'limit' => 'int',
        'context_configuration' => '\OpenAPI\Client\VectaraModel\ContextConfiguration',
        'reranker' => '\OpenAPI\Client\VectaraModel\SearchReranker'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'custom_dimensions' => 'double',
        'metadata_filter' => null,
        'lexical_interpolation' => 'float',
        'semantics' => null,
        'offset' => 'int32',
        'limit' => 'int32',
        'context_configuration' => null,
        'reranker' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'custom_dimensions' => false,
        'metadata_filter' => false,
        'lexical_interpolation' => false,
        'semantics' => false,
        'offset' => false,
        'limit' => false,
        'context_configuration' => false,
        'reranker' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_dimensions' => 'custom_dimensions',
        'metadata_filter' => 'metadata_filter',
        'lexical_interpolation' => 'lexical_interpolation',
        'semantics' => 'semantics',
        'offset' => 'offset',
        'limit' => 'limit',
        'context_configuration' => 'context_configuration',
        'reranker' => 'reranker'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_dimensions' => 'setCustomDimensions',
        'metadata_filter' => 'setMetadataFilter',
        'lexical_interpolation' => 'setLexicalInterpolation',
        'semantics' => 'setSemantics',
        'offset' => 'setOffset',
        'limit' => 'setLimit',
        'context_configuration' => 'setContextConfiguration',
        'reranker' => 'setReranker'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_dimensions' => 'getCustomDimensions',
        'metadata_filter' => 'getMetadataFilter',
        'lexical_interpolation' => 'getLexicalInterpolation',
        'semantics' => 'getSemantics',
        'offset' => 'getOffset',
        'limit' => 'getLimit',
        'context_configuration' => 'getContextConfiguration',
        'reranker' => 'getReranker'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('custom_dimensions', $data ?? [], null);
        $this->setIfExists('metadata_filter', $data ?? [], null);
        $this->setIfExists('lexical_interpolation', $data ?? [], null);
        $this->setIfExists('semantics', $data ?? [], null);
        $this->setIfExists('offset', $data ?? [], 0);
        $this->setIfExists('limit', $data ?? [], 10);
        $this->setIfExists('context_configuration', $data ?? [], null);
        $this->setIfExists('reranker', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['lexical_interpolation']) && ($this->container['lexical_interpolation'] > 1)) {
            $invalidProperties[] = "invalid value for 'lexical_interpolation', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['lexical_interpolation']) && ($this->container['lexical_interpolation'] < 0)) {
            $invalidProperties[] = "invalid value for 'lexical_interpolation', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['offset']) && ($this->container['offset'] < 0)) {
            $invalidProperties[] = "invalid value for 'offset', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['limit']) && ($this->container['limit'] < 1)) {
            $invalidProperties[] = "invalid value for 'limit', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_dimensions
     *
     * @return array<string,float>|null
     */
    public function getCustomDimensions()
    {
        return $this->container['custom_dimensions'];
    }

    /**
     * Sets custom_dimensions
     *
     * @param array<string,float>|null $custom_dimensions The custom dimensions as additional weights.
     *
     * @return self
     */
    public function setCustomDimensions($custom_dimensions)
    {
        if (is_null($custom_dimensions)) {
            throw new \InvalidArgumentException('non-nullable custom_dimensions cannot be null');
        }
        $this->container['custom_dimensions'] = $custom_dimensions;

        return $this;
    }

    /**
     * Gets metadata_filter
     *
     * @return string|null
     */
    public function getMetadataFilter()
    {
        return $this->container['metadata_filter'];
    }

    /**
     * Sets metadata_filter
     *
     * @param string|null $metadata_filter The filter string to narrow the search to according to metadata attributes.
     *
     * @return self
     */
    public function setMetadataFilter($metadata_filter)
    {
        if (is_null($metadata_filter)) {
            throw new \InvalidArgumentException('non-nullable metadata_filter cannot be null');
        }
        $this->container['metadata_filter'] = $metadata_filter;

        return $this;
    }

    /**
     * Gets lexical_interpolation
     *
     * @return float|null
     */
    public function getLexicalInterpolation()
    {
        return $this->container['lexical_interpolation'];
    }

    /**
     * Sets lexical_interpolation
     *
     * @param float|null $lexical_interpolation How much to weigh lexical scores compared to the embedding score. 0 means lexical search is not used at all, and 1 means only lexical search is used.
     *
     * @return self
     */
    public function setLexicalInterpolation($lexical_interpolation)
    {
        if (is_null($lexical_interpolation)) {
            throw new \InvalidArgumentException('non-nullable lexical_interpolation cannot be null');
        }

        if (($lexical_interpolation > 1)) {
            throw new \InvalidArgumentException('invalid value for $lexical_interpolation when calling SearchCorpusParameters., must be smaller than or equal to 1.');
        }
        if (($lexical_interpolation < 0)) {
            throw new \InvalidArgumentException('invalid value for $lexical_interpolation when calling SearchCorpusParameters., must be bigger than or equal to 0.');
        }

        $this->container['lexical_interpolation'] = $lexical_interpolation;

        return $this;
    }

    /**
     * Gets semantics
     *
     * @return \OpenAPI\Client\VectaraModel\SearchSemantics|null
     */
    public function getSemantics()
    {
        return $this->container['semantics'];
    }

    /**
     * Sets semantics
     *
     * @param \OpenAPI\Client\VectaraModel\SearchSemantics|null $semantics semantics
     *
     * @return self
     */
    public function setSemantics($semantics)
    {
        if (is_null($semantics)) {
            throw new \InvalidArgumentException('non-nullable semantics cannot be null');
        }
        $this->container['semantics'] = $semantics;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int|null
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int|null $offset Specifies how many results into the result to skip. This is useful for pagination.
     *
     * @return self
     */
    public function setOffset($offset)
    {
        if (is_null($offset)) {
            throw new \InvalidArgumentException('non-nullable offset cannot be null');
        }

        if (($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for $offset when calling SearchCorpusParameters., must be bigger than or equal to 0.');
        }

        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit The maximum number of results returned.
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }

        if (($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for $limit when calling SearchCorpusParameters., must be bigger than or equal to 1.');
        }

        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets context_configuration
     *
     * @return \OpenAPI\Client\VectaraModel\ContextConfiguration|null
     */
    public function getContextConfiguration()
    {
        return $this->container['context_configuration'];
    }

    /**
     * Sets context_configuration
     *
     * @param \OpenAPI\Client\VectaraModel\ContextConfiguration|null $context_configuration context_configuration
     *
     * @return self
     */
    public function setContextConfiguration($context_configuration)
    {
        if (is_null($context_configuration)) {
            throw new \InvalidArgumentException('non-nullable context_configuration cannot be null');
        }
        $this->container['context_configuration'] = $context_configuration;

        return $this;
    }

    /**
     * Gets reranker
     *
     * @return \OpenAPI\Client\VectaraModel\SearchReranker|null
     */
    public function getReranker()
    {
        return $this->container['reranker'];
    }

    /**
     * Sets reranker
     *
     * @param \OpenAPI\Client\VectaraModel\SearchReranker|null $reranker reranker
     *
     * @return self
     */
    public function setReranker($reranker)
    {
        if (is_null($reranker)) {
            throw new \InvalidArgumentException('non-nullable reranker cannot be null');
        }
        $this->container['reranker'] = $reranker;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


