<?php
/**
 * ContextConfiguration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vectara REST API v2
 *
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\VectaraModel;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContextConfiguration Class Doc Comment
 *
 * @category Class
 * @description Configuration on the presentation of each document part in the result set.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContextConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContextConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'characters_before' => 'int',
        'characters_after' => 'int',
        'sentences_before' => 'int',
        'sentences_after' => 'int',
        'start_tag' => 'string',
        'end_tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'characters_before' => 'int32',
        'characters_after' => 'int32',
        'sentences_before' => 'int32',
        'sentences_after' => 'int32',
        'start_tag' => null,
        'end_tag' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'characters_before' => false,
        'characters_after' => false,
        'sentences_before' => false,
        'sentences_after' => false,
        'start_tag' => false,
        'end_tag' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'characters_before' => 'characters_before',
        'characters_after' => 'characters_after',
        'sentences_before' => 'sentences_before',
        'sentences_after' => 'sentences_after',
        'start_tag' => 'start_tag',
        'end_tag' => 'end_tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'characters_before' => 'setCharactersBefore',
        'characters_after' => 'setCharactersAfter',
        'sentences_before' => 'setSentencesBefore',
        'sentences_after' => 'setSentencesAfter',
        'start_tag' => 'setStartTag',
        'end_tag' => 'setEndTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'characters_before' => 'getCharactersBefore',
        'characters_after' => 'getCharactersAfter',
        'sentences_before' => 'getSentencesBefore',
        'sentences_after' => 'getSentencesAfter',
        'start_tag' => 'getStartTag',
        'end_tag' => 'getEndTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('characters_before', $data ?? [], 0);
        $this->setIfExists('characters_after', $data ?? [], 0);
        $this->setIfExists('sentences_before', $data ?? [], 0);
        $this->setIfExists('sentences_after', $data ?? [], 0);
        $this->setIfExists('start_tag', $data ?? [], null);
        $this->setIfExists('end_tag', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['characters_before']) && ($this->container['characters_before'] < 0)) {
            $invalidProperties[] = "invalid value for 'characters_before', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['characters_after']) && ($this->container['characters_after'] < 0)) {
            $invalidProperties[] = "invalid value for 'characters_after', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sentences_before']) && ($this->container['sentences_before'] < 0)) {
            $invalidProperties[] = "invalid value for 'sentences_before', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sentences_after']) && ($this->container['sentences_after'] < 0)) {
            $invalidProperties[] = "invalid value for 'sentences_after', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets characters_before
     *
     * @return int|null
     */
    public function getCharactersBefore()
    {
        return $this->container['characters_before'];
    }

    /**
     * Sets characters_before
     *
     * @param int|null $characters_before The number of characters before the matching document part that are shown. This is useful to show the context of the document part in the wider document. Ignored if `sentences_before` is set. Vectara will capture the full sentence that contains the captured characters, so as to not lose the meaning caused by a truncated word or sentence.
     *
     * @return self
     */
    public function setCharactersBefore($characters_before)
    {
        if (is_null($characters_before)) {
            throw new \InvalidArgumentException('non-nullable characters_before cannot be null');
        }

        if (($characters_before < 0)) {
            throw new \InvalidArgumentException('invalid value for $characters_before when calling ContextConfiguration., must be bigger than or equal to 0.');
        }

        $this->container['characters_before'] = $characters_before;

        return $this;
    }

    /**
     * Gets characters_after
     *
     * @return int|null
     */
    public function getCharactersAfter()
    {
        return $this->container['characters_after'];
    }

    /**
     * Sets characters_after
     *
     * @param int|null $characters_after The number of characters after the matching document part that are shown.  This is useful to show the context of the document part in the wider document. Ignored if `sentences_after` is set. Vectara will capture the full sentence that contains the captured characters, so as to not lose the meaning caused by a truncated word or sentence.
     *
     * @return self
     */
    public function setCharactersAfter($characters_after)
    {
        if (is_null($characters_after)) {
            throw new \InvalidArgumentException('non-nullable characters_after cannot be null');
        }

        if (($characters_after < 0)) {
            throw new \InvalidArgumentException('invalid value for $characters_after when calling ContextConfiguration., must be bigger than or equal to 0.');
        }

        $this->container['characters_after'] = $characters_after;

        return $this;
    }

    /**
     * Gets sentences_before
     *
     * @return int|null
     */
    public function getSentencesBefore()
    {
        return $this->container['sentences_before'];
    }

    /**
     * Sets sentences_before
     *
     * @param int|null $sentences_before The number of sentences before the matching document part that are shown. This is useful to show the context of the document part in the wider document.
     *
     * @return self
     */
    public function setSentencesBefore($sentences_before)
    {
        if (is_null($sentences_before)) {
            throw new \InvalidArgumentException('non-nullable sentences_before cannot be null');
        }

        if (($sentences_before < 0)) {
            throw new \InvalidArgumentException('invalid value for $sentences_before when calling ContextConfiguration., must be bigger than or equal to 0.');
        }

        $this->container['sentences_before'] = $sentences_before;

        return $this;
    }

    /**
     * Gets sentences_after
     *
     * @return int|null
     */
    public function getSentencesAfter()
    {
        return $this->container['sentences_after'];
    }

    /**
     * Sets sentences_after
     *
     * @param int|null $sentences_after The number of sentences after the matching document part that are shown.  This is useful to show the context of the document part in the wider document.
     *
     * @return self
     */
    public function setSentencesAfter($sentences_after)
    {
        if (is_null($sentences_after)) {
            throw new \InvalidArgumentException('non-nullable sentences_after cannot be null');
        }

        if (($sentences_after < 0)) {
            throw new \InvalidArgumentException('invalid value for $sentences_after when calling ContextConfiguration., must be bigger than or equal to 0.');
        }

        $this->container['sentences_after'] = $sentences_after;

        return $this;
    }

    /**
     * Gets start_tag
     *
     * @return string|null
     */
    public function getStartTag()
    {
        return $this->container['start_tag'];
    }

    /**
     * Sets start_tag
     *
     * @param string|null $start_tag The tag that wraps the document part at the start. This is often used to  provide a start HTML/XML tag or some other delimiter you can use in an  application to understand where to provide highlighting in your UI and  understand where the context before ends and the document part begins.
     *
     * @return self
     */
    public function setStartTag($start_tag)
    {
        if (is_null($start_tag)) {
            throw new \InvalidArgumentException('non-nullable start_tag cannot be null');
        }
        $this->container['start_tag'] = $start_tag;

        return $this;
    }

    /**
     * Gets end_tag
     *
     * @return string|null
     */
    public function getEndTag()
    {
        return $this->container['end_tag'];
    }

    /**
     * Sets end_tag
     *
     * @param string|null $end_tag The tag that wraps the document part at the end. This is often used to  provide a start HTML/XML tag or some other delimiter you can use in an  application to understand where to provide highlighting in your UI and  understand where the context before ends and the document part begins.
     *
     * @return self
     */
    public function setEndTag($end_tag)
    {
        if (is_null($end_tag)) {
            throw new \InvalidArgumentException('non-nullable end_tag cannot be null');
        }
        $this->container['end_tag'] = $end_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


