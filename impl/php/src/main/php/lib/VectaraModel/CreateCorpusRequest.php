<?php
/**
 * CreateCorpusRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vectara REST API v2
 *
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\VectaraModel;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateCorpusRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCorpusRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateCorpusRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'name' => 'string',
        'description' => 'string',
        'queries_are_answers' => 'bool',
        'documents_are_questions' => 'bool',
        'encoder_id' => 'string',
        'filter_attributes' => '\OpenAPI\Client\VectaraModel\FilterAttribute[]',
        'custom_dimensions' => '\OpenAPI\Client\VectaraModel\CorpusCustomDimension[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key' => null,
        'name' => null,
        'description' => null,
        'queries_are_answers' => null,
        'documents_are_questions' => null,
        'encoder_id' => null,
        'filter_attributes' => null,
        'custom_dimensions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key' => false,
        'name' => false,
        'description' => false,
        'queries_are_answers' => false,
        'documents_are_questions' => false,
        'encoder_id' => false,
        'filter_attributes' => false,
        'custom_dimensions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'name' => 'name',
        'description' => 'description',
        'queries_are_answers' => 'queries_are_answers',
        'documents_are_questions' => 'documents_are_questions',
        'encoder_id' => 'encoder_id',
        'filter_attributes' => 'filter_attributes',
        'custom_dimensions' => 'custom_dimensions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'name' => 'setName',
        'description' => 'setDescription',
        'queries_are_answers' => 'setQueriesAreAnswers',
        'documents_are_questions' => 'setDocumentsAreQuestions',
        'encoder_id' => 'setEncoderId',
        'filter_attributes' => 'setFilterAttributes',
        'custom_dimensions' => 'setCustomDimensions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'name' => 'getName',
        'description' => 'getDescription',
        'queries_are_answers' => 'getQueriesAreAnswers',
        'documents_are_questions' => 'getDocumentsAreQuestions',
        'encoder_id' => 'getEncoderId',
        'filter_attributes' => 'getFilterAttributes',
        'custom_dimensions' => 'getCustomDimensions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('queries_are_answers', $data ?? [], false);
        $this->setIfExists('documents_are_questions', $data ?? [], false);
        $this->setIfExists('encoder_id', $data ?? [], null);
        $this->setIfExists('filter_attributes', $data ?? [], null);
        $this->setIfExists('custom_dimensions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ((mb_strlen($this->container['key']) > 50)) {
            $invalidProperties[] = "invalid value for 'key', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/[a-zA-Z0-9_\\=\\-]+$/", $this->container['key'])) {
            $invalidProperties[] = "invalid value for 'key', must be conform to the pattern /[a-zA-Z0-9_\\=\\-]+$/.";
        }

        if (!is_null($this->container['encoder_id']) && !preg_match("/enc_[0-9]+$/", $this->container['encoder_id'])) {
            $invalidProperties[] = "invalid value for 'encoder_id', must be conform to the pattern /enc_[0-9]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key A user-provided key for a corpus.
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        if ((mb_strlen($key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $key when calling CreateCorpusRequest., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/[a-zA-Z0-9_\\=\\-]+$/", ObjectSerializer::toString($key)))) {
            throw new \InvalidArgumentException("invalid value for \$key when calling CreateCorpusRequest., must conform to the pattern /[a-zA-Z0-9_\\=\\-]+$/.");
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name for the corpus. This value defaults to the key.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description for the corpus.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets queries_are_answers
     *
     * @return bool|null
     */
    public function getQueriesAreAnswers()
    {
        return $this->container['queries_are_answers'];
    }

    /**
     * Sets queries_are_answers
     *
     * @param bool|null $queries_are_answers Queries made to this corpus are considered answers, and not questions.
     *
     * @return self
     */
    public function setQueriesAreAnswers($queries_are_answers)
    {
        if (is_null($queries_are_answers)) {
            throw new \InvalidArgumentException('non-nullable queries_are_answers cannot be null');
        }
        $this->container['queries_are_answers'] = $queries_are_answers;

        return $this;
    }

    /**
     * Gets documents_are_questions
     *
     * @return bool|null
     */
    public function getDocumentsAreQuestions()
    {
        return $this->container['documents_are_questions'];
    }

    /**
     * Sets documents_are_questions
     *
     * @param bool|null $documents_are_questions Documents inside this corpus are considered questions, and not answers.
     *
     * @return self
     */
    public function setDocumentsAreQuestions($documents_are_questions)
    {
        if (is_null($documents_are_questions)) {
            throw new \InvalidArgumentException('non-nullable documents_are_questions cannot be null');
        }
        $this->container['documents_are_questions'] = $documents_are_questions;

        return $this;
    }

    /**
     * Gets encoder_id
     *
     * @return string|null
     */
    public function getEncoderId()
    {
        return $this->container['encoder_id'];
    }

    /**
     * Sets encoder_id
     *
     * @param string|null $encoder_id The encoder used by the corpus. This value defaults to the most recent Vectara encoder.
     *
     * @return self
     */
    public function setEncoderId($encoder_id)
    {
        if (is_null($encoder_id)) {
            throw new \InvalidArgumentException('non-nullable encoder_id cannot be null');
        }

        if ((!preg_match("/enc_[0-9]+$/", ObjectSerializer::toString($encoder_id)))) {
            throw new \InvalidArgumentException("invalid value for \$encoder_id when calling CreateCorpusRequest., must conform to the pattern /enc_[0-9]+$/.");
        }

        $this->container['encoder_id'] = $encoder_id;

        return $this;
    }

    /**
     * Gets filter_attributes
     *
     * @return \OpenAPI\Client\VectaraModel\FilterAttribute[]|null
     */
    public function getFilterAttributes()
    {
        return $this->container['filter_attributes'];
    }

    /**
     * Sets filter_attributes
     *
     * @param \OpenAPI\Client\VectaraModel\FilterAttribute[]|null $filter_attributes The new filter attributes of the corpus.  If unset then the corpus will not have filter attributes.
     *
     * @return self
     */
    public function setFilterAttributes($filter_attributes)
    {
        if (is_null($filter_attributes)) {
            throw new \InvalidArgumentException('non-nullable filter_attributes cannot be null');
        }
        $this->container['filter_attributes'] = $filter_attributes;

        return $this;
    }

    /**
     * Gets custom_dimensions
     *
     * @return \OpenAPI\Client\VectaraModel\CorpusCustomDimension[]|null
     */
    public function getCustomDimensions()
    {
        return $this->container['custom_dimensions'];
    }

    /**
     * Sets custom_dimensions
     *
     * @param \OpenAPI\Client\VectaraModel\CorpusCustomDimension[]|null $custom_dimensions A custom dimension is an additional numerical field attached to a document part. You can then multiply this numerical field with a query time custom dimension of the same name. This allows boosting (or deboosting) document parts for arbitrary reasons. This feature is only enabled for Scale customers.
     *
     * @return self
     */
    public function setCustomDimensions($custom_dimensions)
    {
        if (is_null($custom_dimensions)) {
            throw new \InvalidArgumentException('non-nullable custom_dimensions cannot be null');
        }
        $this->container['custom_dimensions'] = $custom_dimensions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


