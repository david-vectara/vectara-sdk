<?php
/**
 * GenerationParameters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vectara REST API v2
 *
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\VectaraModel;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GenerationParameters Class Doc Comment
 *
 * @category Class
 * @description The parameters to control generation.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GenerationParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GenerationParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'prompt_name' => 'string',
        'max_used_search_results' => 'int',
        'prompt_text' => 'string',
        'max_response_characters' => 'int',
        'response_language' => '\OpenAPI\Client\VectaraModel\Language',
        'model_parameters' => '\OpenAPI\Client\VectaraModel\ModelParameters',
        'citations' => '\OpenAPI\Client\VectaraModel\CitationParameters',
        'enable_factual_consistency_score' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'prompt_name' => null,
        'max_used_search_results' => 'int32',
        'prompt_text' => null,
        'max_response_characters' => 'int32',
        'response_language' => null,
        'model_parameters' => null,
        'citations' => null,
        'enable_factual_consistency_score' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'prompt_name' => false,
        'max_used_search_results' => false,
        'prompt_text' => false,
        'max_response_characters' => false,
        'response_language' => false,
        'model_parameters' => false,
        'citations' => false,
        'enable_factual_consistency_score' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prompt_name' => 'prompt_name',
        'max_used_search_results' => 'max_used_search_results',
        'prompt_text' => 'prompt_text',
        'max_response_characters' => 'max_response_characters',
        'response_language' => 'response_language',
        'model_parameters' => 'model_parameters',
        'citations' => 'citations',
        'enable_factual_consistency_score' => 'enable_factual_consistency_score'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prompt_name' => 'setPromptName',
        'max_used_search_results' => 'setMaxUsedSearchResults',
        'prompt_text' => 'setPromptText',
        'max_response_characters' => 'setMaxResponseCharacters',
        'response_language' => 'setResponseLanguage',
        'model_parameters' => 'setModelParameters',
        'citations' => 'setCitations',
        'enable_factual_consistency_score' => 'setEnableFactualConsistencyScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prompt_name' => 'getPromptName',
        'max_used_search_results' => 'getMaxUsedSearchResults',
        'prompt_text' => 'getPromptText',
        'max_response_characters' => 'getMaxResponseCharacters',
        'response_language' => 'getResponseLanguage',
        'model_parameters' => 'getModelParameters',
        'citations' => 'getCitations',
        'enable_factual_consistency_score' => 'getEnableFactualConsistencyScore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('prompt_name', $data ?? [], null);
        $this->setIfExists('max_used_search_results', $data ?? [], 5);
        $this->setIfExists('prompt_text', $data ?? [], null);
        $this->setIfExists('max_response_characters', $data ?? [], null);
        $this->setIfExists('response_language', $data ?? [], null);
        $this->setIfExists('model_parameters', $data ?? [], null);
        $this->setIfExists('citations', $data ?? [], null);
        $this->setIfExists('enable_factual_consistency_score', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['prompt_name']) && (mb_strlen($this->container['prompt_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'prompt_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_used_search_results']) && ($this->container['max_used_search_results'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_used_search_results', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_response_characters']) && ($this->container['max_response_characters'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_response_characters', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prompt_name
     *
     * @return string|null
     */
    public function getPromptName()
    {
        return $this->container['prompt_name'];
    }

    /**
     * Sets prompt_name
     *
     * @param string|null $prompt_name The prompt to use to feed the query results and other context to the model. By specifying the prompt name you also specify the model and other `model_parameter` defaults.
     *
     * @return self
     */
    public function setPromptName($prompt_name)
    {
        if (is_null($prompt_name)) {
            throw new \InvalidArgumentException('non-nullable prompt_name cannot be null');
        }

        if ((mb_strlen($prompt_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $prompt_name when calling GenerationParameters., must be bigger than or equal to 1.');
        }

        $this->container['prompt_name'] = $prompt_name;

        return $this;
    }

    /**
     * Gets max_used_search_results
     *
     * @return int|null
     */
    public function getMaxUsedSearchResults()
    {
        return $this->container['max_used_search_results'];
    }

    /**
     * Sets max_used_search_results
     *
     * @param int|null $max_used_search_results The maximum number of search results to be available to the prompt.
     *
     * @return self
     */
    public function setMaxUsedSearchResults($max_used_search_results)
    {
        if (is_null($max_used_search_results)) {
            throw new \InvalidArgumentException('non-nullable max_used_search_results cannot be null');
        }

        if (($max_used_search_results < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_used_search_results when calling GenerationParameters., must be bigger than or equal to 0.');
        }

        $this->container['max_used_search_results'] = $max_used_search_results;

        return $this;
    }

    /**
     * Gets prompt_text
     *
     * @return string|null
     */
    public function getPromptText()
    {
        return $this->container['prompt_text'];
    }

    /**
     * Sets prompt_text
     *
     * @param string|null $prompt_text Vectara manages both system and user roles and prompts for the generative LLM out of the box by default. However, Scale customers can override the prompt_text via this variable. The prompt_text is in the form of an Apache Velocity template. For more details on how to configure the prompt_text, see the long-form documentation at https://docs.vectara.com/docs/prompts/vectara-prompt-engine. See https://vectara.com/pricing/ for more details on becoming a Scale customer.
     *
     * @return self
     */
    public function setPromptText($prompt_text)
    {
        if (is_null($prompt_text)) {
            throw new \InvalidArgumentException('non-nullable prompt_text cannot be null');
        }
        $this->container['prompt_text'] = $prompt_text;

        return $this;
    }

    /**
     * Gets max_response_characters
     *
     * @return int|null
     */
    public function getMaxResponseCharacters()
    {
        return $this->container['max_response_characters'];
    }

    /**
     * Sets max_response_characters
     *
     * @param int|null $max_response_characters Controls the length of the generated output. This is a rough estimate and not a hard limit: the end output can be longer or shorter than this value.  This is currently a Scale-only feature. See https://vectara.com/pricing/ for more details on becoming a Scale customer.
     *
     * @return self
     */
    public function setMaxResponseCharacters($max_response_characters)
    {
        if (is_null($max_response_characters)) {
            throw new \InvalidArgumentException('non-nullable max_response_characters cannot be null');
        }

        if (($max_response_characters < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_response_characters when calling GenerationParameters., must be bigger than or equal to 0.');
        }

        $this->container['max_response_characters'] = $max_response_characters;

        return $this;
    }

    /**
     * Gets response_language
     *
     * @return \OpenAPI\Client\VectaraModel\Language|null
     */
    public function getResponseLanguage()
    {
        return $this->container['response_language'];
    }

    /**
     * Sets response_language
     *
     * @param \OpenAPI\Client\VectaraModel\Language|null $response_language response_language
     *
     * @return self
     */
    public function setResponseLanguage($response_language)
    {
        if (is_null($response_language)) {
            throw new \InvalidArgumentException('non-nullable response_language cannot be null');
        }
        $this->container['response_language'] = $response_language;

        return $this;
    }

    /**
     * Gets model_parameters
     *
     * @return \OpenAPI\Client\VectaraModel\ModelParameters|null
     */
    public function getModelParameters()
    {
        return $this->container['model_parameters'];
    }

    /**
     * Sets model_parameters
     *
     * @param \OpenAPI\Client\VectaraModel\ModelParameters|null $model_parameters model_parameters
     *
     * @return self
     */
    public function setModelParameters($model_parameters)
    {
        if (is_null($model_parameters)) {
            throw new \InvalidArgumentException('non-nullable model_parameters cannot be null');
        }
        $this->container['model_parameters'] = $model_parameters;

        return $this;
    }

    /**
     * Gets citations
     *
     * @return \OpenAPI\Client\VectaraModel\CitationParameters|null
     */
    public function getCitations()
    {
        return $this->container['citations'];
    }

    /**
     * Sets citations
     *
     * @param \OpenAPI\Client\VectaraModel\CitationParameters|null $citations citations
     *
     * @return self
     */
    public function setCitations($citations)
    {
        if (is_null($citations)) {
            throw new \InvalidArgumentException('non-nullable citations cannot be null');
        }
        $this->container['citations'] = $citations;

        return $this;
    }

    /**
     * Gets enable_factual_consistency_score
     *
     * @return bool|null
     */
    public function getEnableFactualConsistencyScore()
    {
        return $this->container['enable_factual_consistency_score'];
    }

    /**
     * Sets enable_factual_consistency_score
     *
     * @param bool|null $enable_factual_consistency_score Enable returning the factual consistency score with query results.
     *
     * @return self
     */
    public function setEnableFactualConsistencyScore($enable_factual_consistency_score)
    {
        if (is_null($enable_factual_consistency_score)) {
            throw new \InvalidArgumentException('non-nullable enable_factual_consistency_score cannot be null');
        }
        $this->container['enable_factual_consistency_score'] = $enable_factual_consistency_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


