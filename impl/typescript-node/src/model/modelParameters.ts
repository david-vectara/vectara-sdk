/**
 * Vectara REST API v2
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* The parameters for the model.  These are currently a Scale-only feature. See https://vectara.com/pricing/ for more details on becoming a Scale customer. WARNING: This is an experimental feature, and breakable at any point with virtually no notice. It is meant for experimentation to converge on optimal parameters that can then be set in the prompt definitions. 
*/
export class ModelParameters {
    /**
    * The maximum number of tokens to be returned by the model.
    */
    'maxTokens'?: number;
    /**
    * The sampling temperature to use. Higher values make the output more random, while lower values make it more focused and deterministic. 
    */
    'temperature'?: number;
    /**
    * Higher values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim. 
    */
    'frequencyPenalty'?: number;
    /**
    * Higher values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics. 
    */
    'presencePenalty'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "maxTokens",
            "baseName": "max_tokens",
            "type": "number"
        },
        {
            "name": "temperature",
            "baseName": "temperature",
            "type": "number"
        },
        {
            "name": "frequencyPenalty",
            "baseName": "frequency_penalty",
            "type": "number"
        },
        {
            "name": "presencePenalty",
            "baseName": "presence_penalty",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ModelParameters.attributeTypeMap;
    }
}

