/**
 * Vectara REST API v2
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Configuration on the presentation of each document part in the result set.
*/
export class ContextConfiguration {
    /**
    * The number of characters before the matching document part that are shown. This is useful to show the context of the document part in the wider document. Ignored if `sentences_before` is set. Vectara will capture the full sentence that contains the captured characters, so as to not lose the meaning caused by a truncated word or sentence. 
    */
    'charactersBefore'?: number = 0;
    /**
    * The number of characters after the matching document part that are shown.  This is useful to show the context of the document part in the wider document. Ignored if `sentences_after` is set. Vectara will capture the full sentence that contains the captured characters, so as to not lose the meaning caused by a truncated word or sentence. 
    */
    'charactersAfter'?: number = 0;
    /**
    * The number of sentences before the matching document part that are shown. This is useful to show the context of the document part in the wider document. 
    */
    'sentencesBefore'?: number = 0;
    /**
    * The number of sentences after the matching document part that are shown.  This is useful to show the context of the document part in the wider document. 
    */
    'sentencesAfter'?: number = 0;
    /**
    * The tag that wraps the document part at the start. This is often used to  provide a start HTML/XML tag or some other delimiter you can use in an  application to understand where to provide highlighting in your UI and  understand where the context before ends and the document part begins. 
    */
    'startTag'?: string;
    /**
    * The tag that wraps the document part at the end. This is often used to  provide a start HTML/XML tag or some other delimiter you can use in an  application to understand where to provide highlighting in your UI and  understand where the context before ends and the document part begins. 
    */
    'endTag'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "charactersBefore",
            "baseName": "characters_before",
            "type": "number"
        },
        {
            "name": "charactersAfter",
            "baseName": "characters_after",
            "type": "number"
        },
        {
            "name": "sentencesBefore",
            "baseName": "sentences_before",
            "type": "number"
        },
        {
            "name": "sentencesAfter",
            "baseName": "sentences_after",
            "type": "number"
        },
        {
            "name": "startTag",
            "baseName": "start_tag",
            "type": "string"
        },
        {
            "name": "endTag",
            "baseName": "end_tag",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ContextConfiguration.attributeTypeMap;
    }
}

