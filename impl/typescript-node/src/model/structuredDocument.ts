/**
 * Vectara REST API v2
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { StructuredDocumentSection } from './structuredDocumentSection';

/**
* A document with layout features.
*/
export class StructuredDocument {
    /**
    * The Document ID, must be unique within the corpus.
    */
    'id': string;
    /**
    * When the type of the indexed document is `structured` the rest of the object is expected to follow this schema. It allows you to create a document that follows normal document conventions. The Vectara platform will then create document parts using its internal algorithm. 
    */
    'type': string = 'structured';
    /**
    * The title of the document.
    */
    'title'?: string;
    /**
    * The description of the document.
    */
    'description'?: string;
    /**
    * The metadata for a document and is an arbitrary JSON object. Properties of this object can be used by document level filter attributes. 
    */
    'metadata'?: { [key: string]: any; };
    /**
    * The custom dimensions as additional weights.
    */
    'customDimensions'?: { [key: string]: number; };
    /**
    * The subsection of the document.
    */
    'sections': Array<StructuredDocumentSection>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "customDimensions",
            "baseName": "custom_dimensions",
            "type": "{ [key: string]: number; }"
        },
        {
            "name": "sections",
            "baseName": "sections",
            "type": "Array<StructuredDocumentSection>"
        }    ];

    static getAttributeTypeMap() {
        return StructuredDocument.attributeTypeMap;
    }
}

