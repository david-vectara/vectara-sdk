/**
 * Vectara REST API v2
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CitationParameters } from './citationParameters';
import { Language } from './language';
import { ModelParameters } from './modelParameters';

/**
* The parameters to control generation.
*/
export class GenerationParameters {
    /**
    * The prompt to use to feed the query results and other context to the model. By specifying the prompt name you also specify the model and other `model_parameter` defaults. 
    */
    'promptName'?: string;
    /**
    * The maximum number of search results to be available to the prompt.
    */
    'maxUsedSearchResults'?: number = 5;
    /**
    * Vectara manages both system and user roles and prompts for the generative LLM out of the box by default. However, Scale customers can override the prompt_text via this variable. The prompt_text is in the form of an Apache Velocity template. For more details on how to configure the prompt_text, see the long-form documentation at https://docs.vectara.com/docs/prompts/vectara-prompt-engine. See https://vectara.com/pricing/ for more details on becoming a Scale customer. 
    */
    'promptText'?: string;
    /**
    * Controls the length of the generated output. This is a rough estimate and not a hard limit: the end output can be longer or shorter than this value.  This is currently a Scale-only feature. See https://vectara.com/pricing/ for more details on becoming a Scale customer. 
    */
    'maxResponseCharacters'?: number;
    'responseLanguage'?: Language;
    'modelParameters'?: ModelParameters;
    'citations'?: CitationParameters;
    /**
    * Enable returning the factual consistency score with query results.
    */
    'enableFactualConsistencyScore'?: boolean = true;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "promptName",
            "baseName": "prompt_name",
            "type": "string"
        },
        {
            "name": "maxUsedSearchResults",
            "baseName": "max_used_search_results",
            "type": "number"
        },
        {
            "name": "promptText",
            "baseName": "prompt_text",
            "type": "string"
        },
        {
            "name": "maxResponseCharacters",
            "baseName": "max_response_characters",
            "type": "number"
        },
        {
            "name": "responseLanguage",
            "baseName": "response_language",
            "type": "Language"
        },
        {
            "name": "modelParameters",
            "baseName": "model_parameters",
            "type": "ModelParameters"
        },
        {
            "name": "citations",
            "baseName": "citations",
            "type": "CitationParameters"
        },
        {
            "name": "enableFactualConsistencyScore",
            "baseName": "enable_factual_consistency_score",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return GenerationParameters.attributeTypeMap;
    }
}

export namespace GenerationParameters {
}
