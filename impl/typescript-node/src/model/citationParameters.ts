/**
 * Vectara REST API v2
 * Vectara provides an end-to-end platform for creating GenAI products using  a simple to use API.  You can [sign up for an account](https://console.vectara.com/signup) and  then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries  and parameter values.  The Vectara API Playground lets you experiment with REST endpoints from  your browser. Select an endpoint to view its definition, including the  required or optional headers, body, responses, and sample commands. On the  right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually  enter your API Key or OAuth Bearer Token, `customer_id`, and then any  required body parameters like the `corpusID` before sending the API  request.  :::note  Vectara supports two primary methods of authentication: API keys and OAuth  2.0, which are applicable to all endpoints. Query API Keys are used for  read-only querying operations, while Index API Keys provide read and write  access. The OAuth 2.0 operations authenticate with a Bearer Token via the  OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about  how to generate the token. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: feedback@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Style the generator should use when making citations.
*/
export class CitationParameters {
    /**
    * The citation style to be used in summary. Can be one of: * `numeric` - Citations formatted as simple numerals: \\[1\\], \\[2\\] ... * `none` - Citations removed from text. * `html` - Citation formatted as url like `<a href=\"url_pattern\">text_pattern</a>`. * `markdown` - Formatted as `[text_pattern](url_pattern)`. 
    */
    'style'?: CitationParameters.StyleEnum;
    /**
    * The url pattern if the citation_style is set to `html` or `markdown`. The pattern can access metadata attributes in the document or part. e.g. `https://my.doc/foo/{doc.id}/{part.id}`  The default `url_pattern` is an empty string. 
    */
    'urlPattern'?: string;
    /**
    * The text pattern if the citation_style is set to `html` or `markdown`. This pattern sets the href for html or the text within `[]` in markdown, and defaults to N being the index of result if it is not set.  The default citation style looks like `[N](<url_pattern>)` for markdown.  You can use metadata attributes in the `text_pattern`. For example, the pattern `{doc.title}` with citation style `markdown` would result in final citation output like `[Title](<url_pattern>)` when the document\'s metadata includes `{\"title\":\"Title\"}`. 
    */
    'textPattern'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "style",
            "baseName": "style",
            "type": "CitationParameters.StyleEnum"
        },
        {
            "name": "urlPattern",
            "baseName": "url_pattern",
            "type": "string"
        },
        {
            "name": "textPattern",
            "baseName": "text_pattern",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CitationParameters.attributeTypeMap;
    }
}

export namespace CitationParameters {
    export enum StyleEnum {
        None = <any> 'none',
        Numeric = <any> 'numeric',
        Html = <any> 'html',
        Markdown = <any> 'markdown'
    }
}
